pragma cashscript ^0.7.0;

// Payout() can be invoked after relative locktime PERIOD to the pkh in simulated state.
// It also requires a % of the contract balance, CONTRACTFEERATE, to be paid to PKHFEEADDRESS
// The pkh in the state can be changed by invoking refresh(), this requires the contract balance to increase with INCREMENT.

// Opcode count: 58 (max 201)
// Bytesize: 105 (max 520)

contract LastToRefreshWins(
    // constant constructor parameters 
    int increment,
    byte contractFeeRate,
    bytes20 pkhFeeAddress,
    byte period,

    // constructor parameters of simulated state
    // last because constructor parameters are added in reverse order
    bytes20 pkhRecipient
) {
    function refresh(
        bytes20 pkhNewRecipient // new payout address
    ) {
        // require the contract to be at index0 so that tx.inputs[0].value is value of the refresh timer contract
        require(this.activeInputIndex == 0);
        // require contract balance to increase by increment
        int newBalance = tx.inputs[0].value + increment;
        // add new simulated state parameters to the the bytecode with them cut out
        // push 20 bytes, pkhNewRecipient = 21 bytes total
        bytes newContract = 0x14 + pkhNewRecipient + this.activeBytecode.split(21)[1];
        // require next state contract on output index zero
        // can add change output on index one if input larger than increment + fee + dustlimit 
        require(tx.outputs[0].value == newBalance);
        bytes23 newContractLock = new LockingBytecodeP2SH(hash160(newContract));
        require(tx.outputs[0].lockingBytecode == newContractLock);
    }
    function payout(
    ) {
        // require the contract to be at index0 so that tx.inputs[0].value is value of the refresh timer contract
        require(this.activeInputIndex == 0);
        int contractFee = tx.inputs[0].value * int(contractFeeRate) / 100;
        int amountPayout = tx.inputs[0].value - contractFee - 500; // 500 hardcoded fee
        // require payout on output index zero
        require(tx.outputs[0].value == amountPayout);
        bytes25 winnerPayoutLock = new LockingBytecodeP2PKH(pkhRecipient);
        require(tx.outputs[0].lockingBytecode == winnerPayoutLock);
        // require contractFee on output index one
        require(tx.outputs[1].value == contractFee);
        bytes25 contractFeeLock = new LockingBytecodeP2PKH(pkhFeeAddress);
        require(tx.outputs[1].lockingBytecode == contractFeeLock);
        //check relative locktime
        require(tx.age >= int(period));
    }
}
